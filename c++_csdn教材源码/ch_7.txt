//ex1
template <class T>
class TAnyTemp
{
	T x,y;
	public:
		TAnyTemp(T X,T Y):x(X),y(Y){}
		T getx() {return x;}
		T gety() {return y;}
};

//ex2
#include <iostream>
using namespace std;
template <class T>
class Max4
{
	T a,b,c,d;
	T Max(T a,T b){return(a>b)?a:b;}
	public:
		Max4(T, T, T, T);
		T Max(void);
};
template <class T>
Max4<T>::Max4(T x1,T x2,T x3,T x4):a(x1),b(x2),c(x3),d(x4){}
template <class T>
T Max4<T>::Max(void)
{return Max(Max(a,b),Max(c,d));}
void main()
{
	Max4<char>C('W','w','a','A');
	Max4<int>A(-25,-67,-66,-256);
	Max4<double>B(1.25,4.3,-8.6,3.5);
	cout<<C.Max()<<" "<<A.Max()<<" "<<B.Max()<<endl;
}
//ex3
#include <iostream>
using namespace std;
template <class T,int size=4>
class Sum
{
	    T m[size];
	public:
		Sum(T a,T b,T c,T d)
		{m[0]=a;m[1]=b;m[2]=c;m[3]=d;}
		T S()
		{return m[0]+m[1]+m[2]+m[3];}
};

void main()
{
	Sum<int,4>num1(-23,5,8,-2);
	Sum<float,4>f1(3.5f,-8.5f,8.8f,9.7f);
	Sum<double,4>d1(355.4,253.8,456.7,-67.8);
	Sum<char,4>c1('W',-2,-1,-1);
	cout<<num1.S()<<","<<f1.S()<<","<<d1.S()<<","<<c1.S()<<endl;
}

//ex4
#include <iostream>
using namespace std;
class Point
{
	    int x,y;
	public:
		Point(int a,int b)
		{x=a;y=b;}
		void display()
		{cout<<x<<","<<y<<endl;}
};
template <typename T>
class Line:public Point
{
	   T x2,y2;
     public:
		 Line(int a,int b,T c,T d):Point(a,b){x2=c;y2=d;}
		 void display()
		 {Point::display();cout<<x2<<","<<y2<<endl;}
};
void main()
{
	Point a(3,8);
	a.display();
	Line<int>ab(4,5,6,7);
	ab.display();
	Line<double>ad(4,5,6.5,7.8);
	ad.display();
}
//ex5
#include <iostream>
using namespace std;
template <typename T>
class Point
{
	    T x,y;
	public:
		Point(T a,T b)
		{x=a;y=b;}
		void display()
		{cout<<x<<","<<y<<endl;}
};
template <typename T>
class Line:public Point<T>
{
	   T x2,y2;
     public:
		 Line(T a,T b,T c,T d):Point<T>(a,b){x2=c;y2=d;}
		 void display()
		 {Point<T>::display();cout<<x2<<","<<y2<<endl;}
};
void main()
{
	Point <double>a(3.5,8.8);
	a.display();
	Line<int>ab(4,5,6,7);
	ab.display();
	Line<double>ad(4.5,5.5,6.5,7.5);
	ad.display();
}
//ex6
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
void main()
{
	double a[]={1.1,4.4,3.3,2.2};
	vector <double>va(a,a+4),vb(4);
	typedef vector<double>::iterator iterator;
	iterator first=va.begin();
	for(first;first<va.end();first++)
		cout<<*first<<" ";
	for(--first;first>va.begin()-1;first--)
		cout<<*first<<" ";
	copy(va.begin(),va.end(),ostream_iterator<double>(cout," "));

	cout<<endl;
	typedef vector<double>::reverse_iterator reverse_iterator;
	reverse_iterator last=va.rbegin();
	for(last;last<va.rend();last++)
		cout<<*last<<" ";
	for(--last;last>va.rbegin()-1;last--)
		cout<<*last<<" ";
	copy(va.rbegin(),va.rend(),ostream_iterator<double>(cout," "));
}
//ex7
#include <iostream>
#include <algorithm>
#include <functional>
#include <vector>
using namespace std;
void main()
{
	double a[]={1.1,4.4,3.3,2.2};
	vector <double>va(a,a+4),vb(4);
	copy(va.begin(),va.end(),ostream_iterator<double>(cout," "));
	cout<<endl;
    reverse_copy(va.begin(),va.end(),ostream_iterator<double>(cout," "));
	cout<<endl;
	reverse_copy(va.begin(),va.end(),vb.begin());
	copy(vb.begin(),vb.end(),ostream_iterator<double>(cout," "));
	cout<<endl;
	sort(va.begin(),va.end());
	sort(vb.begin(),vb.end(),greater<double>());
    copy(va.begin(),va.end(),ostream_iterator<double>(cout," "));
    cout<<endl;
    copy(vb.begin(),vb.end(),ostream_iterator<double>(cout," "));
	cout<<endl;
	va.swap(vb);
	copy(va.begin(),va.end(),ostream_iterator<double>(cout," "));
    cout<<endl;
    copy(vb.begin(),vb.end(),ostream_iterator<double>(cout," "));
	cout<<endl;
	cout<<*find(va.begin(),va.end(),4.4);
}
//ex8
#include <iostream>
#include <complex>
#include <vector>
using namespace std;
struct st{
    int a,b;
}a[]={{2,5},{4,8}};
void main()
{
  complex<float>num[]={complex<float>(2,3),complex<float>(3.5,4.5)};
  vector<complex<float>*>vnum(2);
  vnum[0]=&num[0];
  vnum[1]=&num[1];
  for(int i=0;i<2;i++)
	  cout<<"real is "<<vnum[i]->real()<<",image is "
	    <<vnum[i]->imag()<<endl;
  vector<st*>cp(2);
  cp[0]=&a[0];
  cp[1]=&a[1];
  for(i=0;i<2;i++)
	  cout<<"a="<<cp[i]->a<<",b="<<cp[i]->b<<endl;
}
//ex9
#include <iostream>
#include <algorithm>
#include <functional>
#include <vector>
using namespace std;
void main()
{
	vector <char>a(10),b(10);
	cout<<a.empty()<<","<<sizeof(a)<<",";
	for(char i='a',j=0;j<10;j++)
		a[j]=i+j;
	cout<<a.max_size()<<","<<a.capacity()
		<<","<<a.size()<<endl;
	for(j=0;j<10;j++)
		cout<<a[j]<<" ";
	cout<<endl;
	copy(a.begin(),a.end(),b.begin());
	copy(a.begin(),a.end(),ostream_iterator<double>(cout," "));
	cout<<endl;
	reverse_copy(a.begin(),a.end(),ostream_iterator<double>(cout," "));
	cout<<endl<<a.front()<<","<<a.back()<<","<<a.operator [](5)<<endl;
    sort(b.begin(),b.end(),greater<char>());
	copy(b.begin(),b.end(),ostream_iterator<char>(cout," "));

}
//ex11
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
void main()
{
	char st[11]="abcdefghij";
	vector <char>a(st,st+10);
	vector <char>::iterator  p;
    p=a.begin();
	a.insert(p+3,'X');
	copy(a.begin(),a.end(),ostream_iterator<char>(cout," "));
	cout<<endl;
	p=a.begin();
	a.insert(p,3,'A');
	copy(a.begin(),a.end(),ostream_iterator<char>(cout," "));
    cout<<endl;
	a.erase(p+8);
	copy(a.begin(),a.end(),ostream_iterator<char>(cout," "));
    cout<<endl;
}
//ex12
#include <iostream>
#include <vector>
using namespace std;
void main()
{
	char st[11]="abcdefghij";
	vector <char>a(st,st+10);
	vector <char>::iterator  p=a.begin();
	vector <char>::reverse_iterator ps;
    for(p=a.begin();p!=a.end();++p)
		cout<<*p<<" ";
	cout<<endl;
	for(p=a.end()-1;p!=a.begin()-1;--p)
		cout<<*p<<" ";
	cout<<endl;
	for(ps=a.rbegin();ps!=a.rend();++ps)
		cout<<*ps<<" ";
	cout<<endl;
	for(--ps;ps!=a.rbegin()-1;--ps)
		cout<<*ps<<" ";

}