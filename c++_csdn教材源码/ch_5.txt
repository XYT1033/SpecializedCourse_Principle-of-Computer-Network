//ex1
#include <iostream>
using namespace std;
class object{
  private:
     int val;
  public:
	  object():val(0)
	  {cout<<"Default constructor for object"<<endl;}
	  object(int i):val(i)
	  {cout<<"Constructor for object"<<val<<endl;}
	  ~object()
	  {cout<<"Destructor for object"<<val<<endl;}
};
class container{
  private:
	  object one;
	  object two;
	  int data;
  public:
      container():data(0)
	  {cout<<"Default constructor for containter"<<endl;}
	  container(int i,int j,int k);
	  ~container()
	  {cout<<"Destructor for container"<<data<<endl;}
};
container::container(int i,int j,int k):two(i),one(j)
	  {
	    data=k;
	    cout<<"Constructor for container"<<data<<endl;
		}

void main()
{
   container obj,anObj(5,6,10);
}

//ex2
#include <iostream>
using namespace std;
class Test{
     static int x;
     int n;
  public:
	  Test(){}
	  Test(int a,int b)
	  {x=a;n=b;}
	  static int func(){return x;}
	  static void sfunc(Test&r,int a){r.n=a;}
	  int Getn(){return n;}
};
int Test::x=25;

void main()
{
	cout<<Test::func();
	Test b,c;
	b.sfunc(b,58);
	cout<<" "<<b.Getn();
	cout<<" "<<b.func();
	cout<<" "<<c.func();
	Test a(24,56);
	cout<<" "<<a.func()<<" "<<b.func()<<" "<<c.func()<<endl;
}

//ex3
#include <iostream>
using namespace std;
class test{
  private:
     int n;
  public:
	  test(int i)
	  {n=i;cout<<"constructor:"<<i<<endl;}
	  ~test(){cout<<"destructo:"<<n<<endl;}
	  int getn(){return n;}
	  void inc(){++n;}
};

void main()
{
	cout<<"loop start"<<endl;
    for(int i=0;i<3;i++){
		static test a(3);
		test b(3);
		a.inc();
		b.inc();
		cout<<"a.n="<<a.getn()<<endl;
	    cout<<"b.n="<<b.getn()<<endl;
	}
	cout<<"loop end."<<endl;
	cout<<"Exit main()"<<endl;
}

//ex4
#include <iostream>
#include <cmath>
using namespace std;
class Point{
  private:
     double x,y;
  public:
	  Point(double xi,double yi)
	  {x=xi;y=yi;}
	  double GetX(){return x;}
	  double GetY(){return y;}
	  friend double distances(Point&,Point&);
};
double distances(Point& a,Point& b)
{
	double dx=a.x-b.x;
	double dy=a.y-b.y;
	return sqrt(dx*dx+dy*dy);
}
void main()
{
    Point p1(3.5,5.5),p2(4.5,6.5);
	cout<<"The distance is "<<distances(p1,p2)<<endl;
}

//ex5
#include <iostream>
using namespace std;
class Two;
class One{
  private:
     int x;
  public:
	  One(int a) {x=a;}
	  int Getx(){return x;}
	  void func(Two&);
};
class Two{
   private:
	   int y;
   public:
	   Two(int b){y=b;}
	   int Gety(){return y;}
	   friend void One::func(Two&);
};
void One::func(Two& r)
{r.y=x;}

void main()
{
    One Obj1(5);
	Two Obj2(8);
	cout<<Obj1.Getx()<<" "<<Obj2.Gety()<<endl;
	Obj1.func(Obj2);
	cout<<Obj1.Getx()<<" "<<Obj2.Gety()<<endl;
}

//ex6
#include <iostream>
using namespace std;
class Two{
   private:
	   int y;
   public:
	   friend class One;
};
class One{
  private:
     int x;
  public:
	  One(int a,Two& r,int b) 
	  {x=a;r.y=b;}
	  void Display(Two&);
};

void One::Display(Two& r)
{cout<<x<<" "<<r.y<<endl;}

void main()
{
    Two Obj2;
	One Obj1(23,Obj2,55);
	Obj1.Display(Obj2);
}
//ex7
#include <iostream>
using namespace std;
class Base{
   private:
	   int x;
	   const int a;
	   static const int b;
	   const int& r;
   public:
	   Base(int,int);
	   void show()
	   {cout<<x<<","<<a<<","<<b<<","<<r<<endl;}
	   void display(const double&r)
	   {cout<<r<<endl;}
};
const int Base::b=125;
Base::Base(int i,int j):x(i),a(j),r(x)
{}
void main()
{
    Base a1(104,118),a2(119,140);
	a1.show();
	a2.show();
	a2.display(3.14159);
}
//ex8
#include <iostream>
using namespace std;
class Base{
   private:
	   double x,y;
	   const double p;
   public:
	   Base(double m,double n,double d):p(d)
	   {x=m;y=n;}
	   void show();
	   void show() const;
};
void Base::show()
{cout<<x<<","<<y<<"p="<<p<<endl;}
void Base::show() const
{cout<<x<<","<<y<<"const p="<<p<<endl;}

void main()
{
    Base a(8.9,2.5,3.1416);
	const Base b(2.5,8.9,3.14);
	b.show();
	a.show();
}

//ex10
#include <iostream>
using namespace std;
class Test{
   private:
	   int num;
	   double f1;
   public:
	   Test(int n){num=n;}
	   Test(int n,double f){num=n;f1=f;}
	   int GetNum()
	   {return num;}
	   double GetF(){return f1;}
};

void main()
{
    Test one[2]={2,4},*p;
	Test two[2]={Test(1,3.2),Test(5,9.5)};
	for(int i=0;i<2;i++)
		cout<<"one["<<i<<"]="<<one[i].GetNum()<<endl;
	p=two;
	for(i=0;i<2;i++,p++)
		cout<<"two["<<i<<"]=("<<p->GetNum()<<","<<p->GetF()
		    <<")"<<endl;
}

//ex11
#include <iostream>
using namespace std;
class Test{
   private:
	   int num;
	   double f1;
   public:
	   Test(int n){num=n;}
	   Test(int n,double f){num=n;f1=f;}
	   int GetNum()
	   {return num;}
	   double GetF(){return f1;}
};

void main()
{
    Test *one[2]={new Test(2),new Test(4)};
	Test *two[2]={new Test(1,3.2),new Test(5,9.5)};
	for(int i=0;i<2;i++)
		cout<<"one["<<i<<"]="<<one[i]->GetNum()<<endl;
	for(i=0;i<2;i++)
		cout<<"two["<<i<<"]=("<<two[i]->GetNum()<<","<<two[i]->GetF()
		    <<")"<<endl;
}

//ex12
#include <iostream>
using namespace std;
class A{
   private:
	   int val;
   public:
	   A(int i){val=i;}
	   int value(int a)
	   {return val+a;}
};

void main()
{
    int(A::*pfun)(int);
	pfun=A::value;
	A obj(10);
	cout<<(obj.*pfun)(15)<<endl;
	A *pc=&obj;
	cout<<(pc->*pfun)(15)<<endl;
}
